====== Exercise 3 - SQL Basics 2 ======

1 | Select the average of rate values from departments M-P. Set result set column name to be Average. Result set value should be presented with two decimals.
--------------------------------------------------
select round(avg(rate),2) as Average 
from EMPS
where dept between 'M' and 'P'
--------------------------------------------------

##################################################
2 | Select employee count of employees having rate value between 6-8. Set result set column name to be EmpRateCount.
--------------------------------------------------
select count(*) as EmpRateCount
from EMPS
where rate between 6 and 8
--------------------------------------------------

##################################################
3 | Count the sum for rate values of employees working in departments A-G?
--------------------------------------------------
select sum(rate)
from EMPS
where dept between 'A' and 'G'
--------------------------------------------------

##################################################
4 | Select the maximum and minimum value of rate value from employees living in Davis. Set result set column names to be Greatest and Smallest.
--------------------------------------------------
select max(rate) as Greatest, min(rate) as Smallest
from EMPS
where city = 'Davis'
--------------------------------------------------

##################################################
5 | Count the amount of employees having rate value over 10 from each department. Department and employee count must be included in the result set. Result set column name should be Count. Set result set by Count column in descending order.
--------------------------------------------------
SELECT dept, COUNT(*) AS Count 
FROM emps 
WHERE rate > 10 
GROUP BY dept 
ORDER BY Count DESC
--------------------------------------------------

##################################################
6 | Create new usernames for employees using string functions. Username should include first two letters from firstname, last three letters from surname and first three numbers from phone number. Use column name Username. Important: Use select query only! Do not alter the existing data.
--------------------------------------------------
select gname, surname, phone, concat(left(gname, 2), right(surname, 3), left(phone, 3)) as Username
from EMPS
--------------------------------------------------

##################################################
7 | Select different cities and show city names in lowercase letters in the result set. Use column name Locations. Order result set by city name in ascending order.
--------------------------------------------------
SELECT distinct lower(city) as Locations 
FROM emps 
ORDER BY city ASC
--------------------------------------------------

##################################################
8 | Select employee firstname, surname and the length of surname (use column name surname_length). Include only employees whose surname length is greater than six characters.
--------------------------------------------------
SELECT gname, surname, length(surname) as surname_length
FROM emps 
where length(surname) > 6
--------------------------------------------------

##################################################
9 | Categorize department budgets in the following manner: budgets below 100000 dollars will be categorized as Low and budgets greater than 100000 as High. Include columns dept, duty, budget and a newly created column (use column name budget_categorization) in the result set.
--------------------------------------------------
SELECT dept, duty, budget,
	case
		when budget < 100000 then 'Low'
		when budget > 100000 then 'High'
        else 'even' # lisäsin tähän tämän elesen vaikka tehtävänannossa sitä ei pyydetykään. Häiritsi null arvot..
	end as budget_categorization
FROM dept 
--------------------------------------------------

##################################################
10 | Count rate value averages for each city (use column name city_averages). City and the average of rate values should be included in the result set. Use descending order by rate value for the result set.
--------------------------------------------------
SELECT city, avg(rate) as city_averages
FROM emps
group by city 
order by city_averages desc
--------------------------------------------------

##################################################
11 | Analyze what the following SELECT query returns and why (not related to Ocelot training database). Write your answer without the comment characters (--, # or /* */).

SELECT CURRENT_USER, 
    CASE
        WHEN CAST(CURRENT_DATE AS CHAR(10)) <= '2011-02-22'
        THEN 'OK'
        ELSE 'Late'
    END as CheckIt
FROM TargetTable
--------------------------------------------------
The code selects 'current_user' from the table 'TargetTable'. Using the string function, a new table 'CheckIt' is created. If the user's 'current_date' status is earlier or the same as '2011-02-22', 
the entry in the CheckIt table will be 'OK', and if it is later, the table will store 'Late'.

Is it possible that this kind of data storage could be used for example in library loans?
--------------------------------------------------